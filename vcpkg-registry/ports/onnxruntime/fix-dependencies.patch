diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index acbde7f..8aadcee 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -718,8 +718,13 @@ if (onnxruntime_BUILD_BENCHMARKS)
   endif()
 endif()
 
-if (NOT WIN32 AND NOT onnxruntime_PREFER_SYSTEM_LIB)
+if (NOT WIN32)
+  if (NOT onnxruntime_PREFER_SYSTEM_LIB)
   add_subdirectory(${PROJECT_SOURCE_DIR}/external/nsync EXCLUDE_FROM_ALL)
+  else()
+  find_package(unofficial-nsync CONFIG REQUIRED)
+  get_target_property(NSYNC_INCLUDE_DIR unofficial::nsync::nsync_cpp INTERFACE_INCLUDE_DIRECTORIES)
+  endif()
 endif()
 # External dependencies
 list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/external)
@@ -825,7 +830,7 @@ get_filename_component(REPO_ROOT "${REPO_ROOT}" ABSOLUTE)
 set(ONNXRUNTIME_INCLUDE_DIR ${REPO_ROOT}/include/onnxruntime)
 
 if (onnxruntime_PREFER_SYSTEM_LIB)
-  find_package(date)
+  find_package(date CONFIG REQUIRED)
 endif()
 if (date_FOUND)
   add_library(date_interface ALIAS date::date)
@@ -833,23 +838,23 @@ else()
   add_subdirectory(external/date EXCLUDE_FROM_ALL)
 endif()
 
-set(SAFEINT_INCLUDE_DIR ${REPO_ROOT}/cmake/external/SafeInt)
+find_path(SAFEINT_INCLUDE_DIR NAMES "SafeInt.hpp" PATHS_SUFFIXES include)
 add_library(safeint_interface INTERFACE)
 target_include_directories(safeint_interface INTERFACE ${SAFEINT_INCLUDE_DIR})
 
 if (onnxruntime_PREFER_SYSTEM_LIB)
-  find_package(boost_mp11)
+  find_path(BOOST_MP11_INCLUDES NAMES mp11.hpp PATH_SUFFIXES include/boost)
+  add_library(Boost::mp11 INTERFACE IMPORTED)
+  target_include_directories(Boost::mp11 INTERFACE ${BOOST_MP11_INCLUDES})
 endif()
 if (NOT TARGET Boost::mp11)
   add_subdirectory(external/mp11 EXCLUDE_FROM_ALL)
 endif()
 
-set(JSON_BuildTests OFF CACHE INTERNAL "")
-set(JSON_Install OFF CACHE INTERNAL "")
-add_subdirectory(external/json EXCLUDE_FROM_ALL)
+find_package(nlohmann_json CONFIG REQUIRED)
 
 if (onnxruntime_PREFER_SYSTEM_LIB)
-  find_package(re2)
+  find_package(re2 CONFIG REQUIRED)
 endif()
 if (NOT TARGET re2::re2)
   add_subdirectory(external/re2 EXCLUDE_FROM_ALL)
@@ -894,6 +899,9 @@ endif()
 
 # TODO  do we have to add target_include_directories to each project that uses this?
 if (CPUINFO_SUPPORTED)
+  find_package(unofficial-cpuinfo CONFIG REQUIRED)
+  add_library(cpuinfo ALIAS unofficial::cpuinfo::cpuinfo)
+  if (0)
   set(PYTORCH_CPUINFO_DIR external/pytorch_cpuinfo)
   set(PYTORCH_CPUINFO_INCLUDE_DIR ${PYTORCH_CPUINFO_DIR}/include)
   set(CPUINFO_BUILD_TOOLS OFF CACHE INTERNAL "")
@@ -911,6 +919,7 @@ if (CPUINFO_SUPPORTED)
   if (MSVC)
     target_compile_options(cpuinfo PRIVATE "-D_CRT_SECURE_NO_WARNINGS")
   endif()
+  endif()
 endif()
 
 # bounds checking behavior.
@@ -938,6 +947,8 @@ set(onnxruntime_EXTERNAL_LIBRARIES onnx onnx_proto ${PROTOBUF_LIB} re2::re2)
 
 set(onnxruntime_LINK_DIRS )
 if (onnxruntime_USE_CUDA)
+      find_package(CUDNN REQUIRED)
+      add_library(cudnn ALIAS CuDNN::CuDNN)
       #TODO: combine onnxruntime_CUDNN_HOME and onnxruntime_CUDA_HOME, assume they are the same
       if (WIN32)
         list(APPEND onnxruntime_LINK_DIRS ${onnxruntime_CUDNN_HOME}/lib/x64 ${onnxruntime_CUDA_HOME}/x64/lib64)
@@ -1165,7 +1176,7 @@ function(onnxruntime_set_compile_flags target_name)
       endif()
 
       target_compile_definitions(${target_name} PUBLIC -DNSYNC_ATOMIC_CPP11)
-      target_include_directories(${target_name} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/external/nsync/public")
+      target_include_directories(${target_name} PRIVATE "${NSYNC_INCLUDE_DIR}")
     endif()
     foreach(ORT_FLAG ${ORT_PROVIDER_FLAGS})
       target_compile_definitions(${target_name} PRIVATE ${ORT_FLAG})
@@ -1383,17 +1394,19 @@ else()
 endif()
 
 if (NOT onnxruntime_MINIMAL_BUILD)
-  add_subdirectory(external/onnx EXCLUDE_FROM_ALL)
+  find_package(ONNX CONFIG REQUIRED)
 else()
   include(onnx_minimal)
 endif()
 
+if (0)
 target_compile_definitions(onnx PUBLIC $<TARGET_PROPERTY:onnx_proto,INTERFACE_COMPILE_DEFINITIONS> PRIVATE "__ONNX_DISABLE_STATIC_REGISTRATION")
 if (NOT onnxruntime_USE_FULL_PROTOBUF)
   target_compile_definitions(onnx PUBLIC "__ONNX_NO_DOC_STRINGS")
 endif()
 set_target_properties(onnx PROPERTIES FOLDER "External/ONNX")
 set_target_properties(onnx_proto PROPERTIES FOLDER "External/ONNX")
+endif()
 
 
 # fix a warning in onnx code we can't do anything about
@@ -1830,7 +1843,7 @@ if (WIN32)
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${SYS_PATH_LIB} Shlwapi)
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES debug Dbghelp)
 else()
-  list(APPEND onnxruntime_EXTERNAL_LIBRARIES nsync_cpp)
+  list(APPEND onnxruntime_EXTERNAL_LIBRARIES unofficial::nsync::nsync_cpp)
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${CMAKE_DL_LIBS} Threads::Threads)
 endif()
 
diff --git a/cmake/external/eigen.cmake b/cmake/external/eigen.cmake
index 264247a..f5908ab 100644
--- a/cmake/external/eigen.cmake
+++ b/cmake/external/eigen.cmake
@@ -1,9 +1,8 @@
 include (ExternalProject)
 
 if (onnxruntime_USE_PREINSTALLED_EIGEN)
-    add_library(eigen INTERFACE)
-    file(TO_CMAKE_PATH ${eigen_SOURCE_PATH} eigen_INCLUDE_DIRS)
-    target_include_directories(eigen INTERFACE ${eigen_INCLUDE_DIRS})
+    find_package(Eigen3 CONFIG REQUIRED)
+    add_library(eigen ALIAS Eigen3::Eigen)
 else ()
     if (onnxruntime_USE_ACL)
         execute_process(COMMAND  git apply --ignore-space-change --ignore-whitespace ${PROJECT_SOURCE_DIR}/patches/eigen/Fix_Eigen_Build_Break.patch WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
diff --git a/cmake/external/onnx_minimal.cmake b/cmake/external/onnx_minimal.cmake
index 33df1f5..13a0b3a 100644
--- a/cmake/external/onnx_minimal.cmake
+++ b/cmake/external/onnx_minimal.cmake
@@ -12,6 +12,9 @@ endif()
 
 #TODO: if protobuf is a shared lib and onnxruntime_USE_FULL_PROTOBUF is ON, then onnx_proto should be built as a shared lib instead of a static lib. Otherwise any code outside onnxruntime.dll can't use onnx protobuf definitions if they share the protobuf.dll with onnxruntime. For example, if protobuf is a shared lib and onnx_proto is a static lib then onnxruntime_perf_test won't work.
 
+find_package(ONNX CONFIG REQUIRED)
+
+if (0)
 set(ONNX_SOURCE_ROOT ${PROJECT_SOURCE_DIR}/external/onnx)
 
 add_library(onnx_proto ${ONNX_SOURCE_ROOT}/onnx/onnx-ml.proto ${ONNX_SOURCE_ROOT}/onnx/onnx-operators-ml.proto ${ONNX_SOURCE_ROOT}/onnx/onnx-data.proto)
@@ -93,4 +96,5 @@ else()
     target_compile_options(onnx PRIVATE "-Wno-unused-but-set-variable")
   endif()
 endif()
+endif()
 
diff --git a/cmake/onnxruntime_common.cmake b/cmake/onnxruntime_common.cmake
index 8425e70..00112c9 100644
--- a/cmake/onnxruntime_common.cmake
+++ b/cmake/onnxruntime_common.cmake
@@ -208,9 +208,12 @@ if (ARM64 OR ARM OR X86 OR X64 OR X86_64)
     # Link cpuinfo
     # Using it mainly in ARM with Android.
     # Its functionality in detecting x86 cpu features are lacking, so is support for Windows.
+    if (NOT TARGET unofficial::cpuinfo::clog)
+        find_package(unofficial-cpuinfo CONFIG REQUIRED)
+    endif()
 
     target_include_directories(onnxruntime_common PRIVATE ${PYTORCH_CPUINFO_INCLUDE_DIR})
     target_link_libraries(onnxruntime_common cpuinfo)
-    list(APPEND onnxruntime_EXTERNAL_LIBRARIES cpuinfo clog)
+    list(APPEND onnxruntime_EXTERNAL_LIBRARIES cpuinfo unofficial::cpuinfo::clog)
   endif()
 endif()
diff --git a/cmake/wil.cmake b/cmake/wil.cmake
index 36a8bc9..0126a69 100644
--- a/cmake/wil.cmake
+++ b/cmake/wil.cmake
@@ -1,5 +1,5 @@
 # Copyright (c) Microsoft Corporation. All rights reserved.
 # Licensed under the MIT License.
 
-add_library(wil INTERFACE)
-target_include_directories(wil INTERFACE external/wil/include/)
\ No newline at end of file
+find_package(wil CONFIG REQUIRED)
+add_library(wil ALIAS WIL::WIL)
\ No newline at end of file
diff --git a/onnxruntime/core/common/safeint.h b/onnxruntime/core/common/safeint.h
index 263e936..82bbe83 100644
--- a/onnxruntime/core/common/safeint.h
+++ b/onnxruntime/core/common/safeint.h
@@ -32,7 +32,7 @@ class SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException> {
 #pragma GCC diagnostic ignored "-Wunused-but-set-parameter"
 #endif
 #endif
-#include "safeint/SafeInt.hpp"
+#include <SafeInt.hpp>
 #if defined(__GNUC__)
 #pragma GCC diagnostic pop
 #endif
